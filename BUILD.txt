OpenCOR is developed, and therefore built and tested, on Windows 7, Linux Ubuntu 10.10 (Maverick Meerkat; both 32-bit and 64-bit) and Mac OS X 10.6 (Snow Leopard). The following build instructions therefore assume that you are using one of these operating systems.

In order to build OpenCOR, you need the following tools:
 - Git (http://git-scm.com/ or the "git" package on Linux): this is the distributed version control system used to keep track of OpenCOR's source code, a copy of which can be cloned using either:
    - Read only:  git clone git://opencor.git.sourceforge.net/gitroot/opencor/opencor
    - Read/write: git clone ssh://<username>@opencor.git.sourceforge.net/gitroot/opencor/opencor
 - CMake 2.8+ (http://www.cmake.org/ or the "cmake" package on Linux): this is the cross-platform build system used to build OpenCOR; and
 - Qt Creator (http://qt.nokia.com/ or the "qtcreator" package on Linux): this is the cross-platform environment used to develop OpenCOR as a Qt 4.7+ application.
   Note #1: both CMake and Git are supported by Qt Creator, but Git might need configuring by selecting the "Tools"|"Options..." menu, then the "Version Control" section, and finally the "Git" tab. Alternatively, you can always use Git from the command line or, on Windows, using TortoiseGit (http://code.google.com/p/tortoisegit/).
   Note #2: on Linux and Mac OS X, you will also need the g++ package and Xcode, respectively.
   Note #3: OpenCOR is developed using the latest version of Qt Creator (currently 2.0.1) which is based on Qt 4.7.0 (even though the latest version of Qt is 4.7.1). However, it happens that OpenCOR can also be built with Qt 4.6 (for now at least). So, for this reason, CMake requires Qt 4.6 or above to build OpenCOR, but this requirement will be revised as soon as Qt 4.6 is shown to break the build.

Once the above tools are installed and you have cloned a copy of OpenCOR, follow the instructions below to build and run OpenCOR from Qt Creator:
 - Start Qt Creator;
 - Open "[OpenCOR]/CMakeLists.txt" (by selecting the "File"|"Open File or Project..." menu or by pressing Ctrl+O);
 - Specify "[OpenCOR]/build" as the build directory;
 - Select "MinGW" as the generator (only on Windows);
 - Click on the "Run CMake" button;
 - Click on the "Finish" button;
 - Select "OpenCOR" as the run target (by selecting the "Build"|"Open Build/Run Target Seclector..." menu or by pressing Ctrl+T); and
 - Build and run OpenCOR (by selecting the "Build"|"Run" menu or by pressing Ctrl+R).

Alternatively, you can use the batch/shell files to clean the project (using cleanall.bat on Windows or cleanall on Linux/Mac OS X), build it (using buildall.bat on Windows or buildall on Linux/Mac OS X) and run it (using run.vbs on Windows or run on Linux/Mac OS X). Note that these batch/shell files require access to CMake, MinGW/g++/Xcode (for Windows, Linux and Mac OS X, respectively) and Qt from the command line. This should be the case on Linux and Mac OS X, but on Windows the "PATH" environment variable might need updating.

Note that, on Windows, MinGW is required to build OpenCOR. It should, however, be possible to build OpenCOR using the Microsoft C++ compiler (and therefore NMake), but this is not currently supported even though we have tried to make "[OpenCOR]/CMakeLists.txt" compatible with both build environments.

Packaging of OpenCOR is done from the command line using packageall.bat on Windows and packageall on Linux/Mac OS X. Note that this requires NSIS on Windows (http://nsis.sourceforge.net/).

Note that though the Linux package is originally meant for Ubuntu 10.10 (Maverick Meerkat; both 32-bit and 64-bit), it should also work with other Linux distributions though additional libraries may be required (e.g. libpng12.so.0 is required to get OpenCOR to work on a 'fresh' openSUSE 11.3, something which can be 'fixed' by installing the "libpng12-0" package).
