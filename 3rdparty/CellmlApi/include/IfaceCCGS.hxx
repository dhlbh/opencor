/* This file is automatically generated from CCGS.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CCGS
#define _GUARD_IFACE_CCGS
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CCGS
#define PUBLIC_CCGS_PRE CDA_EXPORT_PRE
#define PUBLIC_CCGS_POST CDA_EXPORT_POST
#else
#define PUBLIC_CCGS_PRE CDA_IMPORT_PRE
#define PUBLIC_CCGS_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
#include "IfaceCUSES.hxx"
#include "IfaceAnnoTools.hxx"
#include "IfaceCeVAS.hxx"
#include "IfaceMaLaES.hxx"
namespace iface
{
  namespace cellml_services
  {
    class CustomGenerator;
    typedef enum _enum_VariableEvaluationType
    {
      VARIABLE_OF_INTEGRATION = 0,
      CONSTANT = 1,
      STATE_VARIABLE = 2,
      ALGEBRAIC = 3,
      FLOATING = 4,
      LOCALLY_BOUND = 5,
      PSEUDOSTATE_VARIABLE = 6
    } VariableEvaluationType;
    typedef enum _enum_ModelConstraintLevel
    {
      UNDERCONSTRAINED = 0,
      UNSUITABLY_CONSTRAINED = 1,
      OVERCONSTRAINED = 2,
      CORRECTLY_CONSTRAINED = 3
    } ModelConstraintLevel;
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST ComputationTarget
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ComputationTarget() {}
      virtual iface::cellml_api::CellMLVariable* variable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t degree() throw(std::exception&)  = 0;
      virtual iface::cellml_services::VariableEvaluationType type() throw(std::exception&)  = 0;
      virtual wchar_t* name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t assignedIndex() throw(std::exception&)  = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST ComputationTargetIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ComputationTargetIterator() {}
      virtual iface::cellml_services::ComputationTarget* nextComputationTarget() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST CodeInformation
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CodeInformation() {}
      virtual wchar_t* errorMessage() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::ModelConstraintLevel constraintLevel() throw(std::exception&)  = 0;
      virtual uint32_t algebraicIndexCount() throw(std::exception&)  = 0;
      virtual uint32_t rateIndexCount() throw(std::exception&)  = 0;
      virtual uint32_t constantIndexCount() throw(std::exception&)  = 0;
      virtual wchar_t* initConstsString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* ratesString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* variablesString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* functionsString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::ComputationTargetIterator* iterateTargets() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::mathml_dom::MathMLNodeList* flaggedEquations() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST CodeGenerator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CodeGenerator() {}
      virtual wchar_t* constantPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void constantPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* stateVariableNamePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void stateVariableNamePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* algebraicVariableNamePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void algebraicVariableNamePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* rateNamePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void rateNamePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* voiPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void voiPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual uint32_t arrayOffset() throw(std::exception&)  = 0;
      virtual void arrayOffset(uint32_t attr) throw(std::exception&) = 0;
      virtual wchar_t* assignPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void assignPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* solvePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void solvePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* solveNLSystemPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void solveNLSystemPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* temporaryVariablePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void temporaryVariablePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* declareTemporaryPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void declareTemporaryPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* conditionalAssignmentPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void conditionalAssignmentPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_services::MaLaESTransform* transform() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void transform(iface::cellml_services::MaLaESTransform* attr) throw(std::exception&) = 0;
      virtual iface::cellml_services::CeVAS* useCeVAS() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void useCeVAS(iface::cellml_services::CeVAS* attr) throw(std::exception&) = 0;
      virtual iface::cellml_services::CUSES* useCUSES() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void useCUSES(iface::cellml_services::CUSES* attr) throw(std::exception&) = 0;
      virtual iface::cellml_services::AnnotationSet* useAnnoSet() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void useAnnoSet(iface::cellml_services::AnnotationSet* attr) throw(std::exception&) = 0;
      virtual iface::cellml_services::CodeInformation* generateCode(iface::cellml_api::Model* sourceModel) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::CustomGenerator* createCustomGenerator(iface::cellml_api::Model* sourceModel) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool allowPassthrough() throw(std::exception&)  = 0;
      virtual void allowPassthrough(bool attr) throw(std::exception&) = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST CustomCodeInformation
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CustomCodeInformation() {}
      virtual iface::cellml_services::ModelConstraintLevel constraintLevel() throw(std::exception&)  = 0;
      virtual uint32_t indexCount() throw(std::exception&)  = 0;
      virtual iface::cellml_services::ComputationTargetIterator* iterateTargets() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* generatedCode() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* functionsString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST CustomGenerator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CustomGenerator() {}
      virtual iface::cellml_services::ComputationTargetIterator* iterateTargets() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void requestComputation(iface::cellml_services::ComputationTarget* wanted) throw(std::exception&) = 0;
      virtual void markAsKnown(iface::cellml_services::ComputationTarget* known) throw(std::exception&) = 0;
      virtual void markAsUnwanted(iface::cellml_services::ComputationTarget* unwanted) throw(std::exception&) = 0;
      virtual iface::cellml_services::CustomCodeInformation* generateCode() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST IDACodeInformation
     : public virtual iface::cellml_services::CodeInformation
    {
    public:
      virtual ~IDACodeInformation() {}
      virtual wchar_t* essentialVariablesString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* stateInformationString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t conditionVariableCount() throw(std::exception&)  = 0;
      virtual wchar_t* rootInformationString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST IDACodeGenerator
     : public virtual iface::cellml_services::CodeGenerator
    {
    public:
      virtual ~IDACodeGenerator() {}
      virtual iface::cellml_services::IDACodeInformation* generateIDACode(iface::cellml_api::Model* sourceModel) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* residualPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void residualPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* constrainedRateStateInfoPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void constrainedRateStateInfoPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* unconstrainedRateStateInfoPattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unconstrainedRateStateInfoPattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* infDelayedRatePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void infDelayedRatePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* infDelayedStatePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void infDelayedStatePattern(const wchar_t* attr) throw(std::exception&) = 0;
      virtual bool trackPiecewiseConditions() throw(std::exception&)  = 0;
      virtual void trackPiecewiseConditions(bool attr) throw(std::exception&) = 0;
      virtual wchar_t* conditionVariablePattern() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void conditionVariablePattern(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CCGS_PRE 
    class  PUBLIC_CCGS_POST CodeGeneratorBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CodeGeneratorBootstrap() {}
      virtual iface::cellml_services::CodeGenerator* createCodeGenerator() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::IDACodeGenerator* createIDACodeGenerator() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CCGS_PRE
#undef PUBLIC_CCGS_POST
#endif // guard
