/* This file is automatically generated from CeLEDS.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CeLEDS
#define _GUARD_IFACE_CeLEDS
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CeLEDS
#define PUBLIC_CeLEDS_PRE CDA_EXPORT_PRE
#define PUBLIC_CeLEDS_POST CDA_EXPORT_POST
#else
#define PUBLIC_CeLEDS_PRE CDA_IMPORT_PRE
#define PUBLIC_CeLEDS_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
#include "IfaceCUSES.hxx"
#include "IfaceAnnoTools.hxx"
#include "IfaceCeVAS.hxx"
#include "IfaceMaLaES.hxx"
namespace iface
{
  namespace cellml_services
  {
    PUBLIC_CeLEDS_PRE 
    class  PUBLIC_CeLEDS_POST LanguageDictionary
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~LanguageDictionary() {}
      virtual wchar_t* getValue(const wchar_t* keyName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::dom::NodeList* getMappings() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CeLEDS_PRE 
    class  PUBLIC_CeLEDS_POST DictionaryGenerator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~DictionaryGenerator() {}
      virtual iface::cellml_services::LanguageDictionary* getDictionary(const wchar_t* dictionaryNameSpace) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::dom::Element* getElementNS(const wchar_t* nameSpace, const wchar_t* elementName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::MaLaESTransform* getMalTransform() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CeLEDS_PRE 
    class  PUBLIC_CeLEDS_POST CeLEDSBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CeLEDSBootstrap() {}
      virtual iface::cellml_services::DictionaryGenerator* createDictGenerator(const wchar_t* URL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_services::DictionaryGenerator* createDictGeneratorFromText(const wchar_t* XMLText) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* loadError() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CeLEDS_PRE
#undef PUBLIC_CeLEDS_POST
#endif // guard
