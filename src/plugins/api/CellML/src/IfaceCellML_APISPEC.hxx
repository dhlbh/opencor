/* This file is automatically generated from CellML_APISPEC.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CellMLAPISPEC
#define _GUARD_IFACE_CellMLAPISPEC
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CellMLAPISPEC
#define PUBLIC_CellMLAPISPEC_PRE CDA_EXPORT_PRE
#define PUBLIC_CellMLAPISPEC_POST CDA_EXPORT_POST
#else
#define PUBLIC_CellMLAPISPEC_PRE CDA_IMPORT_PRE
#define PUBLIC_CellMLAPISPEC_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
namespace iface
{
  namespace cellml_api
  {
    class Model;
    class Group;
    class MapComponents;
    class CellMLComponent;
    class ImportComponent;
    class ImportUnits;
    class Units;
    class Unit;
    class CellMLImport;
    class CellMLVariable;
    class ComponentRef;
    class RelationshipRef;
    class Connection;
    class MapVariables;
    class Reaction;
    class ReactionSet;
    class VariableRef;
    class Role;
    class ExtensionElementList;
    class ExtensionAttributeSet;
    class MathList;
    class ModelSet;
    class CellMLElementSet;
    class CellMLComponentSet;
    class ImportComponentSet;
    class CellMLVariableSet;
    class UnitsSet;
    class CellMLImportSet;
    class ImportUnitsSet;
    class UnitSet;
    class ConnectionSet;
    class GroupSet;
    class RelationshipRefSet;
    class ComponentRefSet;
    class MapVariablesSet;
    class VariableRefSet;
    class RoleSet;
    typedef iface::dom::Element* ExtensionElement;
    typedef wchar_t* CellMLAttributeString;
    typedef iface::mathml_dom::MathMLElement* MathMLElement;
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RDFRepresentation
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~RDFRepresentation() {}
      virtual wchar_t* type() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RDFXMLDOMRepresentation
     : public virtual iface::cellml_api::RDFRepresentation
    {
    public:
      virtual ~RDFXMLDOMRepresentation() {}
      virtual iface::dom::Document* data() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void data(iface::dom::Document* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RDFXMLStringRepresentation
     : public virtual iface::cellml_api::RDFRepresentation
    {
    public:
      virtual ~RDFXMLStringRepresentation() {}
      virtual wchar_t* serialisedData() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void serialisedData(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST UserData
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~UserData() {}
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportInstantiationListener
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ImportInstantiationListener() {}
      virtual void loadCompleted(bool wasStale) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLException : public std::exception
    {
    public:
      CellMLException(){}
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST URI
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~URI() {}
      virtual wchar_t* asText() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void asText(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLElement
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CellMLElement() {}
      virtual wchar_t* cellmlVersion() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* cmetaId() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void cmetaId(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::ExtensionElementList* extensionElements() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void insertExtensionElementAfter(iface::dom::Element* marker, iface::dom::Element* newEl) throw(std::exception&) = 0;
      virtual void appendExtensionElement(iface::dom::Element* x) throw(std::exception&) = 0;
      virtual void prependExtensionElement(iface::dom::Element* x) throw(std::exception&) = 0;
      virtual void removeExtensionElement(iface::dom::Element* x) throw(std::exception&) = 0;
      virtual void replaceExtensionElement(iface::dom::Element* x, iface::dom::Element* y) throw(std::exception&) = 0;
      virtual void clearExtensionElements() throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLElementSet* childElements() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void addElement(iface::cellml_api::CellMLElement* x) throw(std::exception&) = 0;
      virtual void removeElement(iface::cellml_api::CellMLElement* x) throw(std::exception&) = 0;
      virtual void replaceElement(iface::cellml_api::CellMLElement* x, iface::cellml_api::CellMLElement* y) throw(std::exception&) = 0;
      virtual void removeByName(const wchar_t* type, const wchar_t* name) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLElement* parentElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Model* modelElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void setUserData(const wchar_t* key, iface::cellml_api::UserData* data) throw(std::exception&) = 0;
      virtual iface::cellml_api::UserData* getUserData(const wchar_t* key) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLElement* clone(bool deep) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* getExtensionAttributeNS(const wchar_t* ns, const wchar_t* localName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void setExtensionAttributeNS(const wchar_t* ns, const wchar_t* qualifiedName, const wchar_t* value) throw(std::exception&) = 0;
      virtual void removeExtensionAttributeNS(const wchar_t* ns, const wchar_t* localName) throw(std::exception&) = 0;
      virtual iface::cellml_api::ExtensionAttributeSet* extensionAttributes() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLDOMElement
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CellMLDOMElement() {}
      virtual iface::dom::Element* domElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST NamedCellMLElement
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~NamedCellMLElement() {}
      virtual wchar_t* name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void name(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Model
     : public virtual iface::cellml_api::NamedCellMLElement
    {
    public:
      virtual ~Model() {}
      virtual iface::cellml_api::Model* getAlternateVersion(const wchar_t* cellmlVersion) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::GroupSet* groups() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLImportSet* imports() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::URI* base_uri() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::UnitsSet* localUnits() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::UnitsSet* modelUnits() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::UnitsSet* allUnits() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponentSet* localComponents() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponentSet* modelComponents() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponentSet* allComponents() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ConnectionSet* connections() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::GroupSet* findGroupsWithRelationshipRefName(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void fullyInstantiateImports() throw(std::exception&) = 0;
      virtual void asyncFullyInstantiateImports(iface::cellml_api::ImportInstantiationListener* listener) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLComponent* createComponent() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportComponent* createImportComponent() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Units* createUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportUnits* createImportUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Unit* createUnit() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLImport* createCellMLImport() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLVariable* createCellMLVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ComponentRef* createComponentRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::RelationshipRef* createRelationshipRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Group* createGroup() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Connection* createConnection() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::MapVariables* createMapVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Reaction* createReaction() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::VariableRef* createVariableRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Role* createRole() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::mathml_dom::MathMLMathElement* createMathElement() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::dom::Element* createExtensionElement(const wchar_t* namespaceURI, const wchar_t* qualifiedName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* serialisedText() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::RDFRepresentation* getRDFRepresentation(const wchar_t* type) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Model* cloneAcrossImports() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::URI* xmlBase() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void clearXMLBase() throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MathContainer
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~MathContainer() {}
      virtual iface::cellml_api::MathList* math() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void addMath(iface::mathml_dom::MathMLElement* x) throw(std::exception&) = 0;
      virtual void removeMath(iface::mathml_dom::MathMLElement* x) throw(std::exception&) = 0;
      virtual void replaceMath(iface::mathml_dom::MathMLElement* x, iface::mathml_dom::MathMLElement* y) throw(std::exception&) = 0;
      virtual void clearMath() throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLComponent
     : public virtual iface::cellml_api::NamedCellMLElement , public virtual iface::cellml_api::MathContainer
    {
    public:
      virtual ~CellMLComponent() {}
      virtual iface::cellml_api::CellMLVariableSet* variables() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::UnitsSet* units() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ConnectionSet* connections() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponent* encapsulationParent() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponentSet* encapsulationChildren() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponent* containmentParent() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponentSet* containmentChildren() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ReactionSet* reactions() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual uint32_t importNumber() throw(std::exception&)  = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Units
     : public virtual iface::cellml_api::NamedCellMLElement
    {
    public:
      virtual ~Units() {}
      virtual bool isBaseUnits() throw(std::exception&)  = 0;
      virtual void isBaseUnits(bool attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::UnitSet* unitCollection() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Unit
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~Unit() {}
      virtual int32_t prefix() throw(std::exception&)  = 0;
      virtual void prefix(int32_t attr) throw(std::exception&) = 0;
      virtual double multiplier() throw(std::exception&)  = 0;
      virtual void multiplier(double attr) throw(std::exception&) = 0;
      virtual double offset() throw(std::exception&)  = 0;
      virtual void offset(double attr) throw(std::exception&) = 0;
      virtual double exponent() throw(std::exception&)  = 0;
      virtual void exponent(double attr) throw(std::exception&) = 0;
      virtual wchar_t* units() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void units(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLImport
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~CellMLImport() {}
      virtual iface::cellml_api::URI* xlinkHref() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportComponentSet* components() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportUnitsSet* units() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ConnectionSet* importedConnections() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void instantiate() throw(std::exception&) = 0;
      virtual void asyncInstantiate(iface::cellml_api::ImportInstantiationListener* listener) throw(std::exception&) = 0;
      virtual void instantiateFromText(const wchar_t* xmlText) throw(std::exception&) = 0;
      virtual bool wasInstantiated() throw(std::exception&)  = 0;
      virtual uint32_t uniqueIdentifier() throw(std::exception&)  = 0;
      virtual iface::cellml_api::Model* importedModel() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void uninstantiate() throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportComponent
     : public virtual iface::cellml_api::CellMLComponent
    {
    public:
      virtual ~ImportComponent() {}
      virtual wchar_t* componentRef() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void componentRef(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportUnits
     : public virtual iface::cellml_api::Units
    {
    public:
      virtual ~ImportUnits() {}
      virtual wchar_t* unitsRef() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unitsRef(const wchar_t* attr) throw(std::exception&) = 0;
    };
    typedef enum _enum_VariableInterface
    {
      INTERFACE_IN = 0,
      INTERFACE_OUT = 1,
      INTERFACE_NONE = 2
    } VariableInterface;
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLVariable
     : public virtual iface::cellml_api::NamedCellMLElement
    {
    public:
      virtual ~CellMLVariable() {}
      virtual wchar_t* initialValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void initialValue(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::VariableInterface privateInterface() throw(std::exception&)  = 0;
      virtual void privateInterface(iface::cellml_api::VariableInterface attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::VariableInterface publicInterface() throw(std::exception&)  = 0;
      virtual void publicInterface(iface::cellml_api::VariableInterface attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLVariableSet* connectedVariables() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLVariable* sourceVariable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* componentName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* unitsName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unitsName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::Units* unitsElement() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unitsElement(iface::cellml_api::Units* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ComponentRef
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~ComponentRef() {}
      virtual wchar_t* componentName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void componentName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::ComponentRefSet* componentRefs() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ComponentRef* parentComponentRef() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Group* parentGroup() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RelationshipRef
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~RelationshipRef() {}
      virtual wchar_t* name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void name(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* relationship() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* relationshipNamespace() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void setRelationshipName(const wchar_t* namespaceURI, const wchar_t* name) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Group
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~Group() {}
      virtual iface::cellml_api::RelationshipRefSet* relationshipRefs() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ComponentRefSet* componentRefs() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual bool isEncapsulation() throw(std::exception&)  = 0;
      virtual bool isContainment() throw(std::exception&)  = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Connection
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~Connection() {}
      virtual iface::cellml_api::MapComponents* componentMapping() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::MapVariablesSet* variableMappings() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MapComponents
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~MapComponents() {}
      virtual wchar_t* firstComponentName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void firstComponentName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* secondComponentName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void secondComponentName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLComponent* firstComponent() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void firstComponent(iface::cellml_api::CellMLComponent* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLComponent* secondComponent() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void secondComponent(iface::cellml_api::CellMLComponent* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MapVariables
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~MapVariables() {}
      virtual wchar_t* firstVariableName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void firstVariableName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual wchar_t* secondVariableName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void secondVariableName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLVariable* firstVariable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void firstVariable(iface::cellml_api::CellMLVariable* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLVariable* secondVariable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void secondVariable(iface::cellml_api::CellMLVariable* attr) throw(std::exception&) = 0;
    };
    class VariableRef;
    class Role;
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Reaction
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~Reaction() {}
      virtual iface::cellml_api::VariableRefSet* variableReferences() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual bool reversible() throw(std::exception&)  = 0;
      virtual void reversible(bool attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::VariableRef* getVariableRef(const wchar_t* varName, bool create) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Role* getRoleByDeltaVariable(const wchar_t* varName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST VariableRef
     : public virtual iface::cellml_api::CellMLElement
    {
    public:
      virtual ~VariableRef() {}
      virtual iface::cellml_api::CellMLVariable* variable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void variable(iface::cellml_api::CellMLVariable* attr) throw(std::exception&) = 0;
      virtual wchar_t* variableName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void variableName(const wchar_t* attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::RoleSet* roles() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST Role
     : public virtual iface::cellml_api::CellMLElement , public virtual iface::cellml_api::MathContainer
    {
    public:
      virtual ~Role() {}
      typedef enum _enum_RoleType
      {
        REACTANT = 0,
        PRODUCT = 1,
        RATE = 2,
        CATALYST = 3,
        ACTIVATOR = 4,
        INHIBITOR = 5,
        MODIFIER = 6
      } RoleType;
      typedef enum _enum_DirectionType
      {
        FORWARD = 0,
        REVERSE = 1,
        BOTH = 2
      } DirectionType;
      virtual iface::cellml_api::Role::RoleType variableRole() throw(std::exception&)  = 0;
      virtual void variableRole(iface::cellml_api::Role::RoleType attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::Role::DirectionType direction() throw(std::exception&)  = 0;
      virtual void direction(iface::cellml_api::Role::DirectionType attr) throw(std::exception&) = 0;
      virtual double stoichiometry() throw(std::exception&)  = 0;
      virtual void stoichiometry(double attr) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLVariable* deltaVariable() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void deltaVariable(iface::cellml_api::CellMLVariable* attr) throw(std::exception&) = 0;
      virtual wchar_t* deltaVariableName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void deltaVariableName(const wchar_t* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLElementIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CellMLElementIterator() {}
      virtual iface::cellml_api::CellMLElement* next() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MathMLElementIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~MathMLElementIterator() {}
      virtual iface::mathml_dom::MathMLElement* next() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ExtensionElementList
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ExtensionElementList() {}
      virtual uint32_t length() throw(std::exception&)  = 0;
      virtual bool contains(iface::dom::Element* x) throw(std::exception&) = 0;
      virtual int32_t getIndexOf(iface::dom::Element* x) throw(std::exception&) = 0;
      virtual iface::dom::Element* getAt(uint32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MathList
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~MathList() {}
      virtual uint32_t length() throw(std::exception&)  = 0;
      virtual bool contains(iface::mathml_dom::MathMLElement* x) throw(std::exception&) = 0;
      virtual iface::cellml_api::MathMLElementIterator* iterate() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ExtensionAttributeIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ExtensionAttributeIterator() {}
      virtual iface::dom::Attr* nextAttribute() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ExtensionAttributeSet
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ExtensionAttributeSet() {}
      virtual iface::cellml_api::ExtensionAttributeIterator* iterate() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLElementSet
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CellMLElementSet() {}
      virtual uint32_t length() throw(std::exception&)  = 0;
      virtual bool contains(iface::cellml_api::CellMLElement* x) throw(std::exception&) = 0;
      virtual iface::cellml_api::CellMLElementIterator* iterate() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST NamedCellMLElementSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~NamedCellMLElementSet() {}
      virtual iface::cellml_api::NamedCellMLElement* get(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ModelIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~ModelIterator() {}
      virtual iface::cellml_api::Model* nextModel() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ModelSet
     : public virtual iface::cellml_api::NamedCellMLElementSet
    {
    public:
      virtual ~ModelSet() {}
      virtual iface::cellml_api::ModelIterator* iterateModels() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Model* getModel(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLComponentIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~CellMLComponentIterator() {}
      virtual iface::cellml_api::CellMLComponent* nextComponent() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLComponentSet
     : public virtual iface::cellml_api::NamedCellMLElementSet
    {
    public:
      virtual ~CellMLComponentSet() {}
      virtual iface::cellml_api::CellMLComponentIterator* iterateComponents() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLComponent* getComponent(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportComponentIterator
     : public virtual iface::cellml_api::CellMLComponentIterator
    {
    public:
      virtual ~ImportComponentIterator() {}
      virtual iface::cellml_api::ImportComponent* nextImportComponent() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportComponentSet
     : public virtual iface::cellml_api::CellMLComponentSet
    {
    public:
      virtual ~ImportComponentSet() {}
      virtual iface::cellml_api::ImportComponentIterator* iterateImportComponents() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportComponent* getImportComponent(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLVariableIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~CellMLVariableIterator() {}
      virtual iface::cellml_api::CellMLVariable* nextVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLVariableSet
     : public virtual iface::cellml_api::NamedCellMLElementSet
    {
    public:
      virtual ~CellMLVariableSet() {}
      virtual iface::cellml_api::CellMLVariableIterator* iterateVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::CellMLVariable* getVariable(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST UnitsIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~UnitsIterator() {}
      virtual iface::cellml_api::Units* nextUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST UnitsSet
     : public virtual iface::cellml_api::NamedCellMLElementSet
    {
    public:
      virtual ~UnitsSet() {}
      virtual iface::cellml_api::UnitsIterator* iterateUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Units* getUnits(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportUnitsIterator
     : public virtual iface::cellml_api::UnitsIterator
    {
    public:
      virtual ~ImportUnitsIterator() {}
      virtual iface::cellml_api::ImportUnits* nextImportUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ImportUnitsSet
     : public virtual iface::cellml_api::UnitsSet
    {
    public:
      virtual ~ImportUnitsSet() {}
      virtual iface::cellml_api::ImportUnitsIterator* iterateImportUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::ImportUnits* getImportUnits(const wchar_t* name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLImportIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~CellMLImportIterator() {}
      virtual iface::cellml_api::CellMLImport* nextImport() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLImportSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~CellMLImportSet() {}
      virtual iface::cellml_api::CellMLImportIterator* iterateImports() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST UnitIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~UnitIterator() {}
      virtual iface::cellml_api::Unit* nextUnit() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST UnitSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~UnitSet() {}
      virtual iface::cellml_api::UnitIterator* iterateUnits() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ConnectionIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~ConnectionIterator() {}
      virtual iface::cellml_api::Connection* nextConnection() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ConnectionSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~ConnectionSet() {}
      virtual iface::cellml_api::ConnectionIterator* iterateConnections() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST GroupIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~GroupIterator() {}
      virtual iface::cellml_api::Group* nextGroup() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST GroupSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~GroupSet() {}
      virtual iface::cellml_api::GroupIterator* iterateGroups() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::GroupSet* getSubsetInvolvingRelationship(const wchar_t* relName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::GroupSet* subsetInvolvingEncapsulation() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::GroupSet* subsetInvolvingContainment() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RelationshipRefIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~RelationshipRefIterator() {}
      virtual iface::cellml_api::RelationshipRef* nextRelationshipRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RelationshipRefSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~RelationshipRefSet() {}
      virtual iface::cellml_api::RelationshipRefIterator* iterateRelationshipRefs() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ComponentRefIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~ComponentRefIterator() {}
      virtual iface::cellml_api::ComponentRef* nextComponentRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ComponentRefSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~ComponentRefSet() {}
      virtual iface::cellml_api::ComponentRefIterator* iterateComponentRefs() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MapVariablesIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~MapVariablesIterator() {}
      virtual iface::cellml_api::MapVariables* nextMapVariable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::MapVariables* nextMapVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST MapVariablesSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~MapVariablesSet() {}
      virtual iface::cellml_api::MapVariablesIterator* iterateMapVariables() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ReactionIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~ReactionIterator() {}
      virtual iface::cellml_api::Reaction* nextReaction() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ReactionSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~ReactionSet() {}
      virtual iface::cellml_api::ReactionIterator* iterateReactions() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST VariableRefIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~VariableRefIterator() {}
      virtual iface::cellml_api::VariableRef* nextVariableRef() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST VariableRefSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~VariableRefSet() {}
      virtual iface::cellml_api::VariableRefIterator* iterateVariableRefs() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RoleIterator
     : public virtual iface::cellml_api::CellMLElementIterator
    {
    public:
      virtual ~RoleIterator() {}
      virtual iface::cellml_api::Role* nextRole() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST RoleSet
     : public virtual iface::cellml_api::CellMLElementSet
    {
    public:
      virtual ~RoleSet() {}
      virtual iface::cellml_api::RoleIterator* iterateRoles() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ModelLoadedListener
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ModelLoadedListener() {}
      virtual void loadCompleted(iface::cellml_api::Model* m) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST DocumentLoadedListener
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~DocumentLoadedListener() {}
      virtual void loadCompleted(iface::dom::Document* doc) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST ModelLoader
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~ModelLoader() {}
      virtual iface::cellml_api::Model* loadFromURL(const wchar_t* URL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void asyncLoadFromURL(const wchar_t* URL, iface::cellml_api::ModelLoadedListener* listener) throw(std::exception&) = 0;
      virtual iface::cellml_api::Model* createFromText(const wchar_t* xmlText) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* lastErrorMessage() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST DOMURLLoader
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~DOMURLLoader() {}
      virtual iface::dom::Document* loadDocument(const wchar_t* URL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::dom::Document* loadDocumentFromText(const wchar_t* xmlText) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void asyncLoadDocument(const wchar_t* URL, iface::cellml_api::DocumentLoadedListener* listener) throw(std::exception&) = 0;
      virtual wchar_t* lastErrorMessage() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST DOMModelLoader
     : public virtual iface::cellml_api::ModelLoader
    {
    public:
      virtual ~DOMModelLoader() {}
      virtual iface::cellml_api::Model* createFromDOM(const wchar_t* url, iface::cellml_api::DOMURLLoader* loader) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Model* createFromDOMDocument(iface::dom::Document* doc) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void asyncCreateFromDOM(const wchar_t* url, iface::cellml_api::DOMURLLoader* loader, iface::cellml_api::ModelLoadedListener* listener) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLAPISPEC_PRE 
    class  PUBLIC_CellMLAPISPEC_POST CellMLBootstrap
     : public virtual iface::XPCOM::IObject
    {
    public:
      virtual ~CellMLBootstrap() {}
      virtual iface::cellml_api::DOMModelLoader* modelLoader() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::dom::DOMImplementation* domImplementation() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::DOMURLLoader* localURLLoader() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual iface::cellml_api::Model* createModel(const wchar_t* version) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* serialiseNode(iface::dom::Node* node) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual wchar_t* makeURLAbsolute(const wchar_t* relTo, const wchar_t* relURL) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CellMLAPISPEC_PRE
#undef PUBLIC_CellMLAPISPEC_POST
#endif // guard
